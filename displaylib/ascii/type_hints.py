from __future__ import annotations as _annotations

from typing import TYPE_CHECKING, TypeVar, Protocol

from ..template.type_hints import NodeMixin, Transform2DMixin

if TYPE_CHECKING:
    from ..math import Vec2
    from .engine import AsciiEngine
    from .color import _Color

TextureSelf = TypeVar("TextureSelf", bound="TextureMixin")
AsciiCameraSelf = TypeVar("AsciiCameraSelf", bound="AsciiCameraProtocol")

class TextureMixin(Protocol):
    def __new__(cls, *args, **kwargs) -> ValidTextureNode: ...
    @property
    def texture(self) -> list[list[str]]: ...
    @texture.setter
    def texture(self, value: list[list[str]]) -> None: ...
    @property
    def offset(self) -> Vec2: ...
    @offset.setter
    def offset(self, value: Vec2) -> None: ...
    @property
    def centered(self) -> bool: ...
    @centered.setter
    def centered(self, value: bool) -> None: ...
    @property
    def z_index(self) -> int: ...
    @z_index.setter
    def z_index(self, value: int) -> None: ...
    @property
    def _z_index(self) -> int: ...
    @_z_index.setter
    def _z_index(self, value: int) -> None: ...
    def make_unique(self) -> None: ...
    def as_unique(self: TextureSelf) -> TextureSelf: ...
    def _get_final_texture(self) -> list[list[str]]: ...
    def _get_texture_global_position(self) -> Vec2: ...

class ColorMixin(Protocol):
    def __new__(cls, *args, **kwargs) -> ValidColorNode: ...
    @property
    def root(self) -> AsciiEngine: ...
    @root.setter
    def root(self, value: AsciiEngine) -> None: ...
    @property
    def color(self) -> _Color: ...
    @color.setter
    def color(self, value: _Color) -> None: ...

class ValidTextureNode(TextureMixin, Transform2DMixin, NodeMixin, Protocol): ...

class ValidColorNode(ColorMixin, TextureMixin, Transform2DMixin, NodeMixin, Protocol): ...

class AsciiCameraProtocol(Transform2DMixin, NodeMixin, Protocol):
    def set_current(self) -> None: ...

class AsciiPoint2DProtocol(ColorMixin, TextureMixin, Transform2DMixin, NodeMixin, Protocol): ...

class AsciiLineProtocol(ColorMixin, TextureMixin, Transform2DMixin, NodeMixin, Protocol):
    def __new__(cls: AsciiLineProtocol) -> AsciiLineProtocol: ...
    @property
    def start(self) -> Vec2: ...
    @start.setter
    def start(self, value: Vec2) -> None: ...
    @property
    def end(self) -> Vec2: ...
    @end.setter
    def end(self, value: Vec2) -> None: ...
    @property
    def force_sort(self) -> bool: ...
    @force_sort.setter
    def force_sort(self, value: bool) -> None: ...
    @property
    def points(self) -> list[AsciiPoint2DProtocol]: ...
    @points.setter
    def points(self, value: list[AsciiPoint2DProtocol]) -> None: ...
    def _update(self: AsciiLineProtocol, delta: float) -> None: ...

from __future__ import annotations

import socket
import selectors
from typing import TYPE_CHECKING, Protocol

from ..type_hints import EngineMixin

if TYPE_CHECKING:
    from types import FunctionType

class ServerMixin(Protocol):
    @property
    def _address(self) -> tuple[str | int, int]: ...
    @_address.setter
    def _address(self, value: tuple[str | int, int]) -> None: ...
    @property
    def _selector(self) -> selectors.DefaultSelector: ...
    @_selector.setter
    def _selector(self, value: selectors.DefaultSelector) -> None: ...
    @property
    def _socket(self) -> socket.socket: ...
    @_socket.setter
    def _socket(self, value: socket.socket) -> None: ...
    @property
    def _buffer(self) -> bytes: ...
    @_buffer.setter
    def _buffer(self, value: bytes) -> None: ...
    @property
    def _update_socket(self) -> FunctionType: ...
    def _on_connection_refused(self, error: Exception) -> None: ...
    def _on_client_connected(self, connection: socket.socket, host: str, port: int) -> None: ...
    def _on_client_disconnected(self, connection: socket.socket, error: Exception) -> None: ...
    def _on_request_received(self, sender: socket.socket, request: bytes) -> None: ...
    def _on_system_request(self, request: dict[str, str]) -> None: ...
    def _on_custom_request(self, request: dict[str, str]) -> None: ...

class ValidServer(ServerMixin, EngineMixin, Protocol): ...

from __future__ import annotations as _annotations

from typing import TYPE_CHECKING, TypeVar, Protocol, Callable

if TYPE_CHECKING:
    from ..math import Vec2
    from .node import Node
    from .engine import Engine

T_co = TypeVar("T_co", covariant=True)
Self = TypeVar("Self")

class MroNext(Protocol[T_co]):
    def __new__(cls, *args, **kwargs) -> T_co: ...

class NodeMixin(Protocol):
    @property
    def nodes(self) -> list[Node]: ...
    @nodes.setter
    def nodes(self, value: list[Node]) -> None: ...
    def __new__(cls, *args, **kwargs) -> Node: ...
    @property
    def uid(self) -> str: ...
    @uid.setter
    def uid(self, value: str) -> None: ...
    @property
    def root(self) -> Engine: ...
    @root.setter
    def root(self, value: Engine) -> None: ...
    def __init__(self, parent: Node | None = None, *, force_sort: bool = True) -> None: ...
    @property
    def parent(self) -> Node: ...
    @parent.setter
    def parent(self, value: Node) -> None: ...
    @property
    def process_priority(self) -> int: ...
    @process_priority.setter
    def process_priority(self, value: int) -> None: ...
    @property
    def _process_priority(self) -> int: ...
    @_process_priority.setter
    def _process_priority(self, value: int) -> None: ...
    def where(self: Self, **attributes) -> Self: ...
    def _update(self, delta: float) -> None: ...
    def queue_free(self) -> Callable[[], None]: ...

class Transform2DMixin(Protocol):
    def __new__(cls, *args, **kwargs) -> ValidTransform2DNode: ...
    @property
    def position(self) -> Vec2: ...
    @position.setter
    def position(self, value: Vec2) -> None: ...
    def get_global_position(self) -> Vec2: ...
    def set_global_position(self, Vec2) -> None: ...
    @property
    def rotation(self) -> float: ...
    @rotation.setter
    def rotation(self, value: float) -> None: ...
    def get_global_rotation(self) -> float: ...
    def set_global_rotation(self, float) -> None: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...
    def is_globally_visible(self) -> bool: ...

class ValidNode(NodeMixin, Protocol): ...

class ValidTransform2DNode(Transform2DMixin, NodeMixin, Protocol): ...
